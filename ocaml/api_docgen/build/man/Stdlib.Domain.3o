.TH "Stdlib.Domain" 3 2022-01-26 OCamldoc "OCaml library"
.SH NAME
Stdlib.Domain \- no description
.SH Module
Module   Stdlib.Domain
.SH Documentation
.sp
Module
.BI "Domain"
 : 
.B (module Stdlib__Domain)

.sp

.sp

.sp
.sp
.I type 
.B 'a
.I t 

.sp
A domain of type 
.ft B
\&'a t
.ft R
runs independently, eventually producing a
result of type \&'a, or an exception

.sp

.I val spawn 
: 
.B (unit -> 'a) -> 'a t
.sp

.ft B
spawn f
.ft R
creates a new domain that runs in parallel with the
current domain\&.

.sp

.I val join 
: 
.B 'a t -> 'a
.sp

.ft B
join d
.ft R
blocks until domain 
.ft B
d
.ft R
runs to completion\&.
If 
.ft B
d
.ft R
results in a value, then that is returned by 
.ft B
join d
.ft R
\&.
If 
.ft B
d
.ft R
raises an uncaught exception, then that is thrown by 
.ft B
join d
.ft R
\&.
Domains may only be joined once: subsequent uses of 
.ft B
join d
.ft R
raise Invalid_argument\&.

.sp
.I type id 
= private 
.B int

.sp
Domains have unique integer identifiers

.sp

.I val get_id 
: 
.B 'a t -> id
.sp

.ft B
get_id d
.ft R
returns the identifier of the domain 
.ft B
d
.ft R


.sp

.I val self 
: 
.B unit -> id
.sp

.ft B
self ()
.ft R
is the identifier of the currently running domain

.sp

.I val at_first_spawn 
: 
.B (unit -> unit) -> unit
.sp
Register the given function to be called before the first domain is
spawned\&.

.sp
.B "Raises Invalid_argument"
if the first domain has already been spawned\&.

.sp

.I val at_exit 
: 
.B (unit -> unit) -> unit
.sp
Register the given function to be called at when a domain exits\&. This
function is also registered with 
.ft B
at_exit
.ft R
\&. If the registered
function raises an exception, the exceptions are ignored\&.

.sp

.I val at_startup 
: 
.B (unit -> unit) -> unit
.sp
Register the given function to be called when a domain starts\&. This
function is called before the callback specified to 
.ft B
spawn f
.ft R
is
executed\&.

.sp

.I val cpu_relax 
: 
.B unit -> unit
.sp
If busy\-waiting, calling cpu_relax () between iterations
will improve performance on some CPU architectures

.sp

.I val set_name 
: 
.B string -> unit
.sp

.ft B
set_name s
.ft R
set the domain\&'s thread name to 
.ft B
s
.ft R
\&. 
.ft B
s
.ft R
should not be longer
than 15 characters\&. If 
.ft B
s
.ft R
is longer than 15 characters,
raise Invalid_argument\&.

.sp

.I val is_main_domain 
: 
.B unit -> bool
.sp

.ft B
is_main_domain ()
.ft R
returns true if called from the initial domain\&.

.sp
.I module DLS : 
.B sig end

.sp

.sp
