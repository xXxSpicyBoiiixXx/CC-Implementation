From 5f0848c3d31d1e5c5e281b4b72bde651e6e487cf Mon Sep 17 00:00:00 2001
From: MD Ali <mali54@hawk.iit.edu>
Date: Fri, 28 Jan 2022 12:27:03 -0600
Subject: [PATCH] get initial instruction counts

---
 runtime/interp.c | 53 +++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 50 insertions(+), 3 deletions(-)

diff --git a/runtime/interp.c b/runtime/interp.c
index 40089087f..c69a078b6 100644
--- a/runtime/interp.c
+++ b/runtime/interp.c
@@ -17,6 +17,7 @@
 
 /* The bytecode interpreter */
 #include <stdio.h>
+#include <string.h>
 #include "caml/alloc.h"
 #include "caml/backtrace.h"
 #include "caml/callback.h"
@@ -224,6 +225,12 @@ static value raise_unhandled;
 
 value caml_interprete(code_t prog, asize_t prog_size)
 {
+
+#ifdef DEBUG 
+  unsigned long * op_counts;  
+  unsigned long total_op_count;
+#endif 
+
 #ifdef PC_REG
   register code_t pc PC_REG;
   register value * sp SP_REG;
@@ -318,9 +325,34 @@ value caml_interprete(code_t prog, asize_t prog_size)
   env = Atom(0);
   accu = Val_int(0);
 
+#ifndef DEBUG
+  fprintf(stderr, "Not defined for DEBUG is running\n"); 
+#endif 
+
+
+#ifdef DEBUG  
+  op_counts = NULL; 
+  total_op_count = 0; 
+
+  op_counts = malloc(FIRST_UNIMPLEMENTED_OP * sizeof(unsigned long));
+
+  if(!op_counts) { 
+	fprintf(stderr, "Could not allocate op count array\n"); 
+	exit(1); 
+  }
+
+  memset(op_counts, 0, FIRST_UNIMPLEMENTED_OP * sizeof(unsigned long));
+#endif  
+
 #ifdef THREADED_CODE
 #ifdef DEBUG
  next_instr:
+  if (*pc < FIRST_UNIMPLEMENTED_OP) {
+      op_counts[*pc]++;  
+      total_op_count++; 
+  } else {
+      fprintf(stderr, "Trying to inc opcode %u\n", *pc);
+  }
   if (caml_icount-- == 0) caml_stop_here ();
   CAMLassert(Stack_base(domain_state->current_stack) <= sp);
   CAMLassert(sp <= Stack_high(domain_state->current_stack));
@@ -344,6 +376,14 @@ value caml_interprete(code_t prog, asize_t prog_size)
     CAMLassert(Stack_base(domain_state->current_stack) <= sp);
     CAMLassert(sp <= Stack_high(domain_state->current_stack));
 
+    if (*pc < FIRST_UNIMPLEMENTED_OP) {
+        op_counts[*pc]++;  
+        total_op_count++; 
+    } else {
+        fprintf(stderr, "ERROR: Trying to inc opcode %u but it's invalid\n", *pc);
+    }
+
+
 #endif
     curr_instr = *pc++;
 
@@ -353,7 +393,7 @@ value caml_interprete(code_t prog, asize_t prog_size)
 
 /* Basic stack operations */
 
-    Instruct(ACC0):
+    Instruct(ACC0): 
       accu = sp[0]; Next;
     Instruct(ACC1):
       accu = sp[1]; Next;
@@ -387,8 +427,7 @@ value caml_interprete(code_t prog, asize_t prog_size)
     Instruct(PUSHACC7):
       *--sp = accu; accu = sp[7]; Next;
 
-    Instruct(PUSHACC):
-      *--sp = accu;
+    Instruct(PUSHACC): *--sp = accu;
       /* Fallthrough */
     Instruct(ACC):
       accu = sp[*pc++];
@@ -1231,6 +1270,14 @@ value caml_interprete(code_t prog, asize_t prog_size)
 /* Debugging and machine control */
 
     Instruct(STOP):
+#ifdef DEBUG
+      printf("Is the program stopping? who knows.\n");
+      printf("Total op_count = %lu\n", total_op_count);
+      for (int i = 0; i < FIRST_UNIMPLEMENTED_OP; i++) {
+          printf("Op_counts[%d] = %lu\n", i, op_counts[i]);
+      }
+#endif
+
       domain_state->external_raise = initial_external_raise;
       domain_state->trap_sp_off = initial_trap_sp_off;
       domain_state->current_stack->sp = sp;
-- 
2.35.0

